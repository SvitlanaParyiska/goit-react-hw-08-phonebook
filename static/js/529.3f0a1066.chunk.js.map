{"version":3,"file":"static/js/529.3f0a1066.chunk.js","mappings":"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","sources":["components/App.styled.js","components/ContactForm/ContactForm.jsx","components/EditContactForm/EditContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","pages/Contacts.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n  font-size: 20px;\n  width: 400px;\n  padding: 10px;\n  margin: 0 auto;\n`;\n","import { useState } from 'react';\n//import { Form, Button, Label, Input } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, fetchContacts } from 'redux/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\nimport Notiflix from 'notiflix';\n\nexport const ContactForm = ({ createContact }) => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contactList = useSelector(selectContacts);\n\n  const handleChange = ({ target: { value, name } }) => {\n    if (name === 'name') {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const isAlreadyExist = contactList.find(\n      el => el.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isAlreadyExist) {\n      Notiflix.Notify.warning(`${name} is already in contacts.`);\n      return;\n    }\n\n    try {\n      await dispatch(addContact({ name, number })).unwrap();\n      dispatch(fetchContacts());\n      setName('');\n      setNumber('');\n      form.reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className=\"card p-5 mx-auto mt-5\" style={{ width: 400 }}>\n      <form className=\"mb-3\" onSubmit={handleSubmit}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleInputName\" className=\"form-label\">\n            Name\n          </label>\n          <input\n            name=\"name\"\n            type=\"text\"\n            onChange={handleChange}\n            className={`form-control && 'is-invalid'}`}\n            id=\"exampleInputName\"\n            value={name}\n            required\n          />\n          <div className=\"invalid-feedback\">Please input contact name</div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleInputContactNumber\" className=\"form-label\">\n            Number\n          </label>\n          <input\n            name=\"number\"\n            type=\"tel\"\n            onChange={handleChange}\n            className={`form-control  && 'is-invalid'}`}\n            id=\"exampleInputContactNumber\"\n            value={number}\n            required\n          />\n          <div className=\"invalid-feedback\">Please input contact number</div>\n        </div>\n        <button type=\"submit\" className=\"btn btn-info\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nconst EditContactForm = ({ handleEdit, oldName, oldNumber, cancelEdit }) => {\n  const [name, setName] = useState(oldName);\n  const [number, setNumber] = useState(oldNumber);\n\n  const handleChange = ({ target: { value, name } }) => {\n    if (name === 'name') {\n      setName(value);\n      return;\n    }\n    if (name === 'number') {\n      setNumber(value);\n      return;\n    } else {\n      console.log('error');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    handleEdit({ name, number });\n    setName('');\n    setNumber('');\n    form.reset();\n  };\n\n  return (\n    <div className=\"card p-2 mx-auto mt-2\" style={{ maxWidth: 400 }}>\n      <form className=\"mb-1\" onSubmit={handleSubmit}>\n        <div className=\"mb-1\">\n          <label htmlFor=\"exampleInputName\" className=\"form-label\">\n            Name\n          </label>\n          <input\n            name=\"name\"\n            type=\"text\"\n            onChange={handleChange}\n            className={`form-control && 'is-invalid'}`}\n            id=\"exampleInputName\"\n            value={name}\n            required\n          />\n        </div>\n        <div className=\"mb-1\">\n          <label htmlFor=\"exampleInputContactNumber\" className=\"form-label\">\n            Number\n          </label>\n          <input\n            name=\"number\"\n            type=\"tel\"\n            onChange={handleChange}\n            className={`form-control  && 'is-invalid'}`}\n            id=\"exampleInputContactNumber\"\n            value={number}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-outline-primary\">\n          Edit contact\n        </button>{' '}\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-primary\"\n          onClick={cancelEdit}\n        >\n          Cancel\n        </button>\n      </form>\n    </div>\n\n    // <form onSubmit={handleSubmit}>\n    //   <label>\n    //     Name\n    //     <input\n    //       type=\"text\"\n    //       name=\"name\"\n    //       value={name}\n    //       pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //       title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //       onChange={handleChange}\n    //       required\n    //     />\n    //   </label>\n    //   <label>\n    //     Number\n    //     <input\n    //       type=\"tel\"\n    //       name=\"number\"\n    //       value={number}\n    //       pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n    //       title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    //       onChange={handleChange}\n    //       required\n    //     />\n    //   </label>\n    //   <button type=\"submit\">Edit contact</button>\n    //   <button type=\"button\" onClick={cancelEdit}>\n    //     Cancel\n    //   </button>\n    // </form>\n  );\n};\n\nexport default EditContactForm;\n","import React, { useState } from 'react';\n//import { Button, Item } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport {\n  deleteContact,\n  fetchContacts,\n  patchContact,\n} from 'redux/contactsOperations';\nimport EditContactForm from 'components/EditContactForm/EditContactForm';\nimport { Button } from '@mui/material';\nimport { Avatar, Grid, Card, CardActions, CardHeader } from '@mui/material';\nimport { indigo } from '@mui/material/colors';\n\nconst ContactItem = ({ contact }) => {\n  const [edit, setEdit] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleDelete = async contactId => {\n    try {\n      await dispatch(deleteContact(contactId)).unwrap();\n      dispatch(fetchContacts());\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const editClick = () => {\n    setEdit(true);\n  };\n\n  const handleEdit = async ({ name, number }) => {\n    try {\n      await dispatch(\n        patchContact({ contactId: contact.id, name, number })\n      ).unwrap();\n      dispatch(fetchContacts());\n      setEdit(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const cancelEdit = () => {\n    setEdit(false);\n  };\n\n  return (\n    <>\n      <Grid item key={contact.id}>\n        <Card sx={{ maxWidth: 500 }}>\n          <CardHeader\n            avatar={\n              <Avatar sx={{ bgcolor: indigo[500] }} aria-label=\"contact\">\n                {contact.name?.at(0)?.toUpperCase()}\n              </Avatar>\n            }\n            title={contact.name}\n            subheader={contact.number}\n          />\n          <CardActions>\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              type=\"button\"\n              sx={{ mr: 5 }}\n              //variant=\"contained\"\n              color=\"primary\"\n              onClick={() => editClick()}\n            >\n              Edit\n            </Button>\n            <Button\n              size=\"small\"\n              type=\"button\"\n              variant=\"contained\"\n              color=\"info\"\n              onClick={() => handleDelete(contact.id)}\n            >\n              Delete\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n\n      {/* <Item>\n        <p>\n          {contact.name} : {contact.number}\n        </p>\n        <Button type=\"button\" onClick={() => editClick()}>\n          Edit\n        </Button>\n        <Button type=\"button\" onClick={() => handleDelete(contact.id)}>\n          Delete\n        </Button>\n      </Item> */}\n      {edit && (\n        <EditContactForm\n          handleEdit={handleEdit}\n          oldName={contact.name}\n          oldNumber={contact.number}\n          cancelEdit={cancelEdit}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport ContactItem from 'components/ContactItem/ContactItem';\n//import { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { Grid } from '@mui/material';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  ///div className=\"container\"\n  return (\n    <>\n      <Grid container direction=\"row\" spacing={4} justifyContent=\"center\">\n        {visibleContacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n//import { Input, Title } from './Filter.styled';\nimport { setFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(setFilter(event.target.value.toLowerCase()));\n  };\n\n  return (\n    <Box\n      component=\"div\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField\n        id=\"outlined-multiline-static\"\n        label=\"Filter by name\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={changeFilter}\n        value={useSelector(selectFilter)}\n      />\n    </Box>\n  );\n};\n\n//{/* <div>\n//    <Title>Filter by name</Title>\n//    <Input\n//      type=\"text\"\n//    name=\"filter\"\n//     onChange={changeFilter}\n//    value={useSelector(selectFilter)}\n//   pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//  />\n// </div> */}\n\nexport default Filter;\n","import React from 'react';\n\nconst Notification = ({ text }) => {\n  return <p>{text}</p>;\n};\n\nexport default Notification;\n","import React, { useEffect } from 'react';\nimport { Container } from 'components/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Notification from 'components/Notification/Notification';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading, selectError } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contactsOperations';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {contacts.length > 0 ? (\n        <Filter />\n      ) : (\n        <Notification text={'Your phonebook is empty. Add first contact!'} />\n      )}\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","ContactForm","_ref","createContact","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","contactList","useSelector","selectContacts","handleChange","_ref2","_ref2$target","target","value","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","form","wrap","_context","prev","next","preventDefault","find","el","toLowerCase","Notiflix","concat","abrupt","addContact","unwrap","fetchContacts","reset","t0","console","log","stop","_x","apply","arguments","_jsx","className","style","width","children","_jsxs","onSubmit","htmlFor","type","onChange","id","required","handleEdit","oldName","oldNumber","cancelEdit","maxWidth","onClick","_contact$name","_contact$name$at","contact","edit","setEdit","handleDelete","contactId","deleteContact","_ref4","_callee2","_context2","patchContact","_x2","_Fragment","Grid","item","Card","sx","CardHeader","avatar","Avatar","bgcolor","indigo","at","toUpperCase","title","subheader","CardActions","Button","size","variant","mr","color","EditContactForm","visibleContacts","selectVisibleContacts","container","direction","spacing","justifyContent","map","ContactItem","Box","component","m","noValidate","autoComplete","TextField","label","event","setFilter","selectFilter","text","Contacts","contacts","isLoading","selectIsLoading","error","selectError","useEffect","length","Filter","Notification","ContactList"],"sourceRoot":""}